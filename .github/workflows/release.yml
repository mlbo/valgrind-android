name: release
#on: [push, pull_request]
on:
  push:
    tags:
      - "*"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: get-version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  android_arm32:
    runs-on: ubuntu-latest
    env:
      VALGRIND_VERSION: 3.17.0
      PACKAGENAME: valgrind-3.17.0-android_arm32
    steps:
      - uses: actions/checkout@v2
      - name: ndk-fix-debug
        run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
      - name: valgrind-source
        run: |
          wget -q https://sourceware.org/pub/valgrind/valgrind-${{ env.VALGRIND_VERSION }}.tar.bz2
          tar -xf valgrind-${{ env.VALGRIND_VERSION }}.tar.bz2
          cd valgrind-${{ env.VALGRIND_VERSION }}
          patch -p1 -i ../valgrind-3.16.1-ndk-r19-minimal_setjmp.patch
          patch -p1 -i ../valgrind-3.16.1-fix-build-new-ndk.patch
      - name: build-arm7
        run: |
          cd valgrind-${{ env.VALGRIND_VERSION }}

          export AR=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/androideabi-linux-android-ar
          export LD=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/androideabi-linux-android-ld
          export CC=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

          export CPPFLAGS="-O3 --target=armv7-none-linux-android19 --gcc-toolchain=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64 --sysroot=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CFLAGS="-O3 --target=armv7-none-linux-android19 --gcc-toolchain=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64 --sysroot=$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot"

          ./configure --prefix=/data/local/tmp/valgrind --host=armv7-unknown-linux --target=armv7-unknown-linux --with-tmpdir=/data/local/tmp
          make -j2
          make install DESTDIR=`pwd`/install
      - name: strip-debug
        run: |
          cd valgrind-${{ env.VALGRIND_VERSION }}/install
          find . -type f | xargs -i sh -c "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/androideabi-linux-android-strip -g {} || true"
      - name: package
        run: |
          mkdir ${{ env.PACKAGENAME }}
          cp -rf valgrind-${{ env.VALGRIND_VERSION }}/install/data/local/tmp/valgrind ${{ env.PACKAGENAME }}/
          rm -rf ${{ env.PACKAGENAME }}/valgrind/include
          rm -rf ${{ env.PACKAGENAME }}/valgrind/share
          rm -rf ${{ env.PACKAGENAME }}/valgrind/lib
          zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

    release:
      needs: [setup, android]
      runs-on: ubuntu-latest
      steps:
        - name: download
          uses: actions/download-artifact@v2
          with:
            path: artifacts

        - name: create-release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ needs.setup.outputs.VERSION }}
            release_name: Release ${{ needs.setup.outputs.VERSION }}
            draft: false
            prerelease: false

        - name: upload-android
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            PACKAGENAME: valgrind-3.17.0-android
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
            asset_name: ${{ env.PACKAGENAME }}.zip
            asset_content_type: application/zip
